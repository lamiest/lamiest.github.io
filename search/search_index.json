{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Lamiest Hub","text":"<p>Senior Computer Engineering Jasem Alsuwaidi is ready to explore the vast and complex background of computers using the tools and knowledge gained within Khalifa University. Currently partaking in an intership opportunity in Security Industry Regulation Agency. You will find all of my projects in the projects page and their respective links under!</p> <p>I am passionate about learning new techniques and tools to create and develop programs, web servers and pages, networks and much more. I enjoy playing competitive games and hope to be one of the best in both Engineering and gaming! I am a competitive person in general and I strive to hone my knowledge on all things electronic, digital and games. I have expertise in circuit analysis and circuit building, generating code test cases, employing software engineering techniques, and programming and troubleshooting Microprocessor/Embedded Systems</p>"},{"location":"#eductional-background","title":"Eductional Background","text":"<ul> <li>High School Diploma (Advanced track): Dubai National Schools, Al Twar branch (October 2020)</li> <li>Bachelor\u2019s Degree in Computer Engineering: Khalifa University (Expected Graduation 2026)</li> </ul>"},{"location":"#coursework-and-university-projects","title":"Coursework and University Projects","text":"<p>1) Banking System with Different User Types (Software) 2) Research on applications of Artifical Intelligence on Businesses 3) Access System Using Microcontroller (Software &amp; Hardware) in Assembly and C++ languages 4) Building and connecting circuits operational amplifiers 5) Analysis of frequency using Bi-directional Junction Transistors and Metal-Oxide-Semiconductor Field Effect Transistors to control police siren leds. 6) (On-going) Regenerative Breaking Embedded System to increase efficiency of electric bike range.</p>"},{"location":"#contacts","title":"Contacts","text":"<p> Instagram</p> <p> GitHub</p>"},{"location":"Research/","title":"Research and Future Goals","text":""},{"location":"Research/#abstract","title":"Abstract","text":"<p>As an student and currently an intern, education and learning is my primary goal to keep in line with expectiations. My current research fields are listed below:</p>"},{"location":"Research/#vision-and-mission","title":"Vision and Mission","text":""},{"location":"Research/#vision","title":"Vision","text":"<p>To be a well-established and knowledgable engineer in the field of anything electronic both software and hardware based.</p>"},{"location":"Research/#mission","title":"Mission","text":"<p>To contribute to multiple projects in building and expanding on computer technology, information gathering and management. In additon, to be able to disect and analyze electric circuits with utmost expertise.</p>"},{"location":"Research/#interests","title":"Interests","text":"<ul> <li>Quantum Computing</li> <li>Computer Vision</li> <li>Advanced Networking</li> <li>Digital Systems Design</li> <li>Signal Analysis</li> </ul>"},{"location":"Projects/ESP32%20Touch%20Detector/","title":"ESP32 Touch Detector","text":""},{"location":"Projects/ESP32%20Touch%20Detector/#esp32-touch-detector-and-counter-using-eeprom","title":"ESP32 Touch Detector and counter using EEPROM","text":""},{"location":"Projects/ESP32%20Touch%20Detector/#introduction","title":"Introduction","text":"<p>This project revolves around the use of the ESP-WROOM-32 touch modules within the pins of the microcontroller. The main purpose is to be able to use the touch sensors to detect specifically where (which pin) the detection occurred in and to increment the detection count from the EEPROM. This was done in the Arduino IDE in the language of C++. Ensure that the board can communicate with the Host on COM(1-5) in Serial Communication. Respective drivers for the communication may be needed. The project code can be found in its entirety on my github.</p>"},{"location":"Projects/ESP32%20Touch%20Detector/#required-libraries","title":"Required Libraries","text":"<ul> <li>esp32 by expressif (Board Library) </li> <li>ArduinoJson by Benoit Blanchon </li> </ul>"},{"location":"Projects/ESP32%20Touch%20Detector/#code-introduction-and-explaination","title":"Code introduction and explaination","text":"<p>The code serves as foundational information to test the functionality of the touch module found within the pins of ESP32. To start off, we included the Arduino and EEPROM header files and defined the pins (2,4,13) to be the inputs of our program. An integer value (30) served as the threshold value for when a touch is detected by the pin, otherwise, bogus values with be given and attempted to be handled by the program which can lead to issues.</p> <p>After giving the follow arguments, the address of EEPROM at 0 will reset to 0.</p> <pre><code>EEPROM.write(0,0) // Or this can be initialized to a pin GPIO as a hard reset.\n</code></pre>"},{"location":"Projects/ESP32%20Touch%20Detector/#eeprom-library","title":"EEPROM Library","text":"<p>The main functions used in the program from the EEPROM library is EEPROM.begin(size) which sets the value saved data by integer \u201csize\u201d bytes. At the start of our loop(), Detections is set by the data found in address 0 of the EEPROM then it is printed in a String() parser. We used EEPROM.read(0) to read from address 0 and save it in the integer variable Detections. EEPROM.write(0, Detections) was used to overwrite the data in address 0 by the new incremented value of detections such that we may be able to conserve the count between resets. EEPROM.commit() is used to save the changed EEPROM.write() values between resets.</p>"},{"location":"Projects/ESP32%20Touch%20Detector/#esp32-base-library","title":"ESP32 base library","text":"<p>In the ESP32, I used the function touchread(pin) to read from the desired pins then print in the console the detection location accordingly.</p>"},{"location":"Projects/ESP32%20Touch%20Detector/#running-tests","title":"Running tests","text":"<p>Appending the pins into a 3 bit value:</p> <pre><code>  //check if pins meet the threshold set (30). Anything below means there was a touch detection.\n  if(t1 &lt; STRONGTOUCH){\n    TouchDetected |= (1&lt;&lt;0); // Bit 0: Pin 4\n    }\n  if(t2 &lt; STRONGTOUCH){\n    TouchDetected |= (1&lt;&lt;1); // Bit 1: Pin 13\n    }\n  if(t3  &lt; STRONGTOUCH){\n    TouchDetected |= (1&lt;&lt;2); // Bit 3: Pin 2\n    }\n  }\n</code></pre> <p>For handling multiple detections a switch case was implemented:</p> <pre><code>   else{ // handles multiple detections at once.\n    switch(TouchDetected){ //0b000: 2, 13, 4\n</code></pre>"},{"location":"Projects/ESP32%20Touch%20Detector/#testing-individual-pins","title":"Testing individual pins","text":"<ul> <li>1 second delay per touch detection</li> <li>System is in polling mode awaiting a touch to be read</li> <li>Strong touch only can be detected to avoid inconsistency and inaccurate reading</li> </ul>"},{"location":"Projects/ESP32%20Touch%20Detector/#double-pins","title":"Double Pins","text":"<ul> <li>Same as the individual pins but checking if the system can detect 2 simultaneous pin sensors.</li> <li>Detect count should increment by 2</li> </ul>"},{"location":"Projects/ESP32%20Touch%20Detector/#all-pins","title":"All Pins","text":"<ul> <li>Test if all pins can be detected simultaneously</li> <li>Detect count incremented by 3</li> </ul>"},{"location":"Projects/ESP32%20Touch%20Detector/#eeprom-detection-count-preservation","title":"EEPROM Detection Count Preservation","text":"<ul> <li>Detection count should continue at the point it was before reset.</li> <li>Handle data integrity between resets</li> </ul>"},{"location":"Projects/ESP32%20Web%20server/","title":"ESP32 Web server","text":""},{"location":"Projects/ESP32%20Web%20server/#esp32-web-server-running-a-basic-calculator","title":"ESP32 Web Server running a Basic Calculator","text":"<p>This project was made on the ESP-WROOM-32 as a basic functioning web server and a calculator. The main purpose is to demonstrate the capabilities of the WiFi module of the ESP32 to function as a local web server and to show that data can be sent/received on WiFi.</p>"},{"location":"Projects/ESP32%20Web%20server/#required-libraries","title":"Required Libraries","text":"<p>1) Async- AsyncEspFsWebserver by Tolentino  2) ESPAsyncWebServer by lacamera  3) esp32 by Espressif Systems (Board Library) 4) Arduino ESP32 Boards by Arduino</p>"},{"location":"Projects/ESP32%20Web%20server/#wifi-library-use","title":"WiFi Library Use","text":"<p>During setup, the \u201cWiFi.begin(ssid, password);\u201d function allows ESP32 to attempt to connect to a router using the WiFi library\u2019s begin() function. ssid and password will have to be replaced by your actual router ssid and router\u2019s password.  while(WiFi.status() != WL_CONNECTED) will check if the board has successfully connected to the router, otherwise, it will stay idle while waiting for an ACK from the router. WiFi.localIP() will print out the local IP address of your ESP32 which you need to be able to connect to the web page from a host in the SAME network. After connection, we can initialize the server to wait for incoming connection requests using client as an object of class WiFiClient whenever the server is available. This is a boolean value that changes depending on the connectivity of the client to the web page. While the client is connected and is available to receive bytes from the server, a string header prints out the web page content using client.println() function where the printed out strings are HTML-based content which will generate the web page for the client that is connected.</p>"},{"location":"Projects/ESP32%20Web%20server/#console-terminal","title":"Console terminal","text":"<p>For security and testing purposes, a console will print any activities within the web page in the case of client connection and disconnection. For the initialization phase, the ESP32 Dynamic IP address will be printed where the user needs to input it on the host and connect to the IP address.</p>"},{"location":"Projects/ESP32%20Web%20server/#scripts-html","title":"Scripts (HTML)","text":"<p>Within the Arduino IDE, you may notice that we used HTML scripts. This is because we want to make the web page function as our intended calculator project. There are 3 important scripts/functions we added in the project:  1) add(val) </p> <pre><code>client.println(\"function add(val) {\");\nclient.println(\"  let display = document.getElementById('display');\"); // Find display value\nclient.println(\"  if (val === '+') {resultShown = false;};\"); // Add next digits \nclient.println(\"  if (resultShown &amp;&amp; val !== '+') {\"); // User re-inputs different numbers, reset calculator\nclient.println(\"    display.value = '';\");  // Clear previous result\nclient.println(\"    resultShown = false;\"); // Result is not shown in display\nclient.println(\"  }\");\nclient.println(\"  if (display.value === '' &amp;&amp; val === '+') return;\");  // Append '+' and first input and check if display is empty\nclient.println(\"  display.value += val;\");                     \nclient.println(\"}\");\n</code></pre> <p>Takes the button input ids from the textbox and converts them to numbers which is then added to each other within the textbox </p> <p>2) clearDisplay() </p> <pre><code>client.println(\"function clearDisplay() {\");\nclient.println(\"  document.getElementById('display').value = '';\"); \nclient.println(\"  resultShown = false;\");\nclient.println(\"}\");\n</code></pre> <p>Removes all text in the calculator\u2019s textbox </p> <p>3) calculate() </p> <pre><code>          client.println(\"function calculate() {\");\n          client.println(\"  let input = document.getElementById('display').value;\");\n          client.println(\"  if (/^[0-9+]+$/.test(input)) {\");\n          client.println(\"    let result = input.split('+').reduce((a,b) =&gt; Number(a) + Number(b),0);\");\n          client.println(\"    document.getElementById('display').value = result;\");\n          client.println(\"    resultShown = true;\");\n          client.println(\"  } else {\");\n          client.println(\"    document.getElementById('display').value = 'Error';\");\n          client.println(\"    resultShown = true;\");\n          client.println(\"  }\");\n          client.println(\"}\");\n</code></pre> <p>Main function, calculates the added values and checks for validity of the inputs (Digits and \u2018+\u2019 are the only whitlisted inputs) </p>"},{"location":"Projects/ESP32%20Web%20server/#running-test","title":"Running Test","text":""},{"location":"Projects/ESP32%20Web%20server/#homepage-of-web-server","title":"Homepage of Web server","text":"<ul> <li>Connected to the Dynamic IP of the Host Web Server</li> <li>IP may change between web server reboots</li> <li>Connection changes will affect the IP of host</li> <li>Inability for user to type in the results window</li> </ul>"},{"location":"Projects/ESP32%20Web%20server/#testing-multiple-input-digits-separated-by","title":"Testing Multiple Input digits separated by \u201c+\u201d","text":"<ul> <li>Testing different inputs of different sizes (digits)</li> <li>Testing the separation function due to \u201c+\u201d</li> </ul>"},{"location":"Projects/ESP32%20Web%20server/#final-result-of-calculation","title":"Final result of Calculation","text":"<ul> <li>Display the sum in the textbox</li> <li>Allow for continuation of addition by inputting \u201c+\u201d</li> <li>Clear and remove displayed sum from memory if a digit was inputted</li> </ul>"}]}